#include <GL/glut.h>
#include <cmath>

void drawCircle(float centerX, float centerY, float radius, int segments, float r, float g, float b) {
    glColor3f(r, g, b);
    glBegin(GL_LINE_LOOP);
    for(int i = 0; i < segments; ++i) {
        float theta = 2.0f * 3.1415926f * float(i) / float(segments);
        float x = radius * cosf(theta);
        float y = radius * sinf(theta);
        glVertex2f(x + centerX, y + centerY);
    }
    glEnd();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Background color
    glClearColor(0.2f, 0.4f, 0.6f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);

    // Circles
    float centerX = 0.0f, centerY = 0.4f;
    drawCircle(centerX, centerY, 0.50f, 100, 1.0f, 0.0f, 0.0f); // Red outer circle
    drawCircle(centerX, centerY, 0.45f, 100, 1.0f, 1.0f, 0.0f); // Yellow circle
    drawCircle(centerX, centerY, 0.35f, 100, 0.0f, 0.0f, 0.0f); // Black circle


    // Green filled circle
    glColor3f(0.0f, 1.0f, 0.0f);
    glBegin(GL_POLYGON);
    for(int i = 0; i < 100; ++i) {
        float theta = 2.0f * 3.1415926f * float(i) / float(100);
        float x = 0.1f * cosf(theta);
        float y = 0.1f * sinf(theta);
        glVertex2f(x + centerX, y + centerY);
    }
    glEnd();

    // Orange rectangle
    glColor3f(1.0f, 0.5f, 0.0f);
    glBegin(GL_QUADS);
        glVertex2f(-0.4f, -0.5f);
        glVertex2f(0.4f, -0.5f);
        glVertex2f(0.4f, -0.3f);
        glVertex2f(-0.4f, -0.3f);
    glEnd();

    glFlush();
}

void init() {
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(-1.0, 1.0, -1.0, 1.0);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Display Shapes");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
